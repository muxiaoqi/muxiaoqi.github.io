<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>muxiaoqi&#39;s Blogs</title>
    <link>https://muxiaoqi.github.io/</link>
    <description>Recent content on muxiaoqi&#39;s Blogs</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
    <lastBuildDate>Tue, 02 Mar 2021 16:38:41 +0800</lastBuildDate><atom:link href="https://muxiaoqi.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Redis String</title>
      <link>https://muxiaoqi.github.io/posts/redis/string/</link>
      <pubDate>Tue, 02 Mar 2021 16:38:41 +0800</pubDate>
      
      <guid>https://muxiaoqi.github.io/posts/redis/string/</guid>
      <description>set key value // 设置指定key的值 mset key value [key value ...] // 同时设置一个或多个 key-value 对 getset key value // 将给定key值为value, 并返回key的旧值 setbit key offset value // 对 key 所储存的字符串值，设置或清除指定偏移量上的位(bit) setex key seconds value // 将值 value 关联到 key ，并将 key 的过期时间设为 seconds (以秒为单位) setnx key value // 只有在 key 不存在时设置 key 的值  </description>
    </item>
    
    <item>
      <title>GO 结构体</title>
      <link>https://muxiaoqi.github.io/posts/example/struct/</link>
      <pubDate>Thu, 25 Feb 2021 17:43:52 +0800</pubDate>
      
      <guid>https://muxiaoqi.github.io/posts/example/struct/</guid>
      <description>GO的结构体是各个字段及字段类型的集合。
定义一个结构体 type person struct { name string age int } 实例化结构体 // 基本的实例化形式 var student person // 创建指针类型结构体 student := new(person) // 取结构体的地址实例化 student := &amp;amp;person{} 初始化 // 多值列表初始化结构体 student := person{ &amp;#34;小明&amp;#34;, 10, } fmt.Println(student) // {小明 10}  // 键值对初始化结构体 student := person{ name: &amp;#34;小明&amp;#34;, age: 10, } fmt.Println(student) // {小明 10}  // 初始化匿名结构体 msg := struct { id int data string }{ 10, &amp;#34;hello&amp;#34;, } fmt.</description>
    </item>
    
    <item>
      <title>goland激活</title>
      <link>https://muxiaoqi.github.io/posts/ide/goland%E6%BF%80%E6%B4%BB/</link>
      <pubDate>Thu, 25 Feb 2021 16:16:01 +0800</pubDate>
      
      <guid>https://muxiaoqi.github.io/posts/ide/goland%E6%BF%80%E6%B4%BB/</guid>
      <description>下载破解补丁 链接：https://pan.baidu.com/s/1Nv6wg9ZRt1Wp6LZnMSBQuQ 提取码：56h0
下载补丁文件jetbrains-agent.jar并将它放置到 Goland安装目录的\bin目录下（位置可随意，放这里是怕误操作删除了破解文件）。
进入项目 如果你之前已经使用有效期激活过可跳过此步骤，如果你是刚下载的GoLand，则需要点击激活窗口的“Evaluate for free”免费试用，然后再创建一个空项目，这样就可以进入到GoLand的工作页面
修改配置文件 进入到项目界面后，点击GoLand最上面的菜单栏中的 “Help” -&amp;gt; “Edit Custom VM Options …”，如果提示是否要创建文件，请点”Yes”
在打开的vmoptions编辑窗口末行添加：-javaagent:你goland的安装目录\jetbrains-agent.jar
修改完配置文件之后重启GoLand
输入激活码 重启GoLand之后，点击菜单栏中的 “Help” -&amp;gt; “Register …”，选择Activation code方式激活，复制下面激活码即可</description>
    </item>
    
    <item>
      <title>Go 指针</title>
      <link>https://muxiaoqi.github.io/posts/example/pointers/</link>
      <pubDate>Tue, 08 Dec 2020 18:25:01 +0800</pubDate>
      
      <guid>https://muxiaoqi.github.io/posts/example/pointers/</guid>
      <description>i := 1 fmt.Printf(&amp;#34;变量i的类型为：%T， 值为：%v&amp;#34;, i, i) // 变量i的类型为：int， 值为：1  iptr := &amp;amp;i fmt.Printf(&amp;#34;变量iptr的类型为： %T，值为：%v&amp;#34;, iptr, iptr) // 变量iptr的类型为： *int，值为：0xc0000a2058 fmt.Printf(&amp;#34;变量iptr的指针值为：%v&amp;#34;, *iptr) //变量iptr的指针值为：1 </description>
    </item>
    
    <item>
      <title>Go 函数</title>
      <link>https://muxiaoqi.github.io/posts/example/functions/</link>
      <pubDate>Mon, 07 Dec 2020 11:29:03 +0800</pubDate>
      
      <guid>https://muxiaoqi.github.io/posts/example/functions/</guid>
      <description>无参数无返回值的函数 func say() { fmt.Println(&amp;#34;hello go world&amp;#34;) } func main() { say() } 有返回值的函数 // 声明一个求和函数 -- 单返回值 func plus(a int, b int) int { return a + b } // 声明一个多返回值函数 func return2(a int, b int) (int, int) { return a + b, a * b } func main() { // 调用函数  result := plus(2, 3) fmt.Println(&amp;#34;2+3=&amp;#34;, result) // 两个返回值  res1, res2 := return2(1, 1) fmt.Println(&amp;#34;1+1=&amp;#34;, res1, &amp;#34;1*1=&amp;#34;, res2) // 只取一个值  _, res3 := return2(2, 3) fmt.</description>
    </item>
    
    <item>
      <title>Go Range遍历</title>
      <link>https://muxiaoqi.github.io/posts/example/range/</link>
      <pubDate>Mon, 07 Dec 2020 11:17:31 +0800</pubDate>
      
      <guid>https://muxiaoqi.github.io/posts/example/range/</guid>
      <description>nums := []int{1,2,3,4,5} sum := 0 // 不需索引的遍历 for _, num := range nums { sum += num } fmt.Println(&amp;#34;求和结果为：&amp;#34;, sum) // 求和结果为： 15  // 需要索引的遍历 for index, num := range nums { if num == 4 { fmt.Println(&amp;#34;4的索引值为：&amp;#34;, index) // 4的索引值为： 3  } } // 在字符串中迭代 unicode 编码 for i, c := range &amp;#34;go&amp;#34; { fmt.Println(i, c) //0 103 1 111 } </description>
    </item>
    
    <item>
      <title>Go 数据结构</title>
      <link>https://muxiaoqi.github.io/posts/example/datatype/</link>
      <pubDate>Fri, 04 Dec 2020 16:38:07 +0800</pubDate>
      
      <guid>https://muxiaoqi.github.io/posts/example/datatype/</guid>
      <description>数组 array // array var arr [5]int fmt.Printf(&amp;#34;创建一个长度为%v, 类型为%T的数组arr\n&amp;#34;, len(arr), arr) arr[2] = 100 fmt.Printf(&amp;#34;赋值之后的新数组为：%v\n&amp;#34;, arr) // 带初始化array格式 arr1 := [5]int{1,2,3,4,5} fmt.Printf(&amp;#34;创建一个带初始值的数组：%v\n&amp;#34;, arr1) // 多维数组 var arr2 [2][3]int for i := 0; i &amp;lt; 2; i++ { for j := 0; j &amp;lt; 3; j++ { arr2[i][j] = i + j } } fmt.Println(&amp;#34;构造一个二维数组&amp;#34;, arr2) 切片 slice // slice make创建 s := make([]int, 3) fmt.Printf(&amp;#34;make 创建了一个长度为：%v, 类型为%T的切片\n&amp;#34;, len(s), s) // 切片追加元素 s = append(s, 10, 11, 12, 13) fmt.</description>
    </item>
    
    <item>
      <title>Go For循环</title>
      <link>https://muxiaoqi.github.io/posts/example/loop/</link>
      <pubDate>Fri, 04 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://muxiaoqi.github.io/posts/example/loop/</guid>
      <description>// 经典for循环 for i:=0; i&amp;lt;10; i++ { fmt.Println(i) } // 单个循环条件 j := 1 for j &amp;lt; 5{ fmt.Println(j) j++ } // 永久循环 循环体内使用break/return跳出循环 for { fmt.Println(&amp;#34;一直循环&amp;#34;) break } </description>
    </item>
    
    <item>
      <title>Go 流程控制</title>
      <link>https://muxiaoqi.github.io/posts/example/controlflow/</link>
      <pubDate>Fri, 04 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://muxiaoqi.github.io/posts/example/controlflow/</guid>
      <description>条件控制 if-else // if-else基本例子 if 8%2 == 0 { fmt.Println(&amp;#34;8是偶数&amp;#34;) } else { fmt.Println(&amp;#34;8是奇数&amp;#34;) } // 条件之前带语句的 if-else if i := 5; i &amp;lt; 0 { fmt.Println(i, &amp;#34;为负数&amp;#34;) } else if i &amp;lt; 10 { fmt.Println(i, &amp;#34;为1位数&amp;#34;) } else { fmt.Println(i, &amp;#34;为多位数&amp;#34;) } 分支结构 switch // switch sex := 1 switch sex { case 0: fmt.Println(&amp;#34;保密&amp;#34;) case 1: fmt.Println(&amp;#34;男&amp;#34;) case 2: fmt.Println(&amp;#34;女&amp;#34;) } // 一个分支中多表达式 switch time.Now().Weekday() { case time.Saturday, time.</description>
    </item>
    
    <item>
      <title>Readme</title>
      <link>https://muxiaoqi.github.io/about/readme/</link>
      <pubDate>Wed, 02 Dec 2020 19:38:07 +0800</pubDate>
      
      <guid>https://muxiaoqi.github.io/about/readme/</guid>
      <description>创建新文章 hugo new posts/my-first-post.md打包网站到 /docs 文件夹 hugo -d docs</description>
    </item>
    
  </channel>
</rss>
