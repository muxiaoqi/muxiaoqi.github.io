<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Go example on muxiaoqi&#39;s Blogs</title>
    <link>https://muxiaoqi.github.io/tags/go-example/</link>
    <description>Recent content in Go example on muxiaoqi&#39;s Blogs</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
    <lastBuildDate>Mon, 07 Dec 2020 11:29:03 +0800</lastBuildDate><atom:link href="https://muxiaoqi.github.io/tags/go-example/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Go 函数</title>
      <link>https://muxiaoqi.github.io/posts/example/functions/</link>
      <pubDate>Mon, 07 Dec 2020 11:29:03 +0800</pubDate>
      
      <guid>https://muxiaoqi.github.io/posts/example/functions/</guid>
      <description>无参数无返回值的函数 func say() { fmt.Println(&amp;#34;hello go world&amp;#34;) } func main() { say() } 有返回值的函数 // 声明一个求和函数 -- 单返回值 func plus(a int, b int) int { return a + b } // 声明一个多返回值函数 func return2(a int, b int) (int, int) { return a + b, a * b } func main() { // 调用函数  result := plus(2, 3) fmt.Println(&amp;#34;2+3=&amp;#34;, result) // 两个返回值  res1, res2 := return2(1, 1) fmt.Println(&amp;#34;1+1=&amp;#34;, res1, &amp;#34;1*1=&amp;#34;, res2) // 只取一个值  _, res3 := return2(2, 3) fmt.</description>
    </item>
    
    <item>
      <title>Go Range遍历</title>
      <link>https://muxiaoqi.github.io/posts/example/range/</link>
      <pubDate>Mon, 07 Dec 2020 11:17:31 +0800</pubDate>
      
      <guid>https://muxiaoqi.github.io/posts/example/range/</guid>
      <description>nums := []int{1,2,3,4,5} sum := 0 // 不需索引的遍历 for _, num := range nums { sum += num } fmt.Println(&amp;#34;求和结果为：&amp;#34;, sum) // 求和结果为： 15  // 需要索引的遍历 for index, num := range nums { if num == 4 { fmt.Println(&amp;#34;4的索引值为：&amp;#34;, index) // 4的索引值为： 3  } } // 在字符串中迭代 unicode 编码 for i, c := range &amp;#34;go&amp;#34; { fmt.Println(i, c) //0 103 1 111 } </description>
    </item>
    
    <item>
      <title>Go 数据结构</title>
      <link>https://muxiaoqi.github.io/posts/example/datatype/</link>
      <pubDate>Fri, 04 Dec 2020 16:38:07 +0800</pubDate>
      
      <guid>https://muxiaoqi.github.io/posts/example/datatype/</guid>
      <description>数组 array // array var arr [5]int fmt.Printf(&amp;#34;创建一个长度为%v, 类型为%T的数组arr\n&amp;#34;, len(arr), arr) arr[2] = 100 fmt.Printf(&amp;#34;赋值之后的新数组为：%v\n&amp;#34;, arr) // 带初始化array格式 arr1 := [5]int{1,2,3,4,5} fmt.Printf(&amp;#34;创建一个带初始值的数组：%v\n&amp;#34;, arr1) // 多维数组 var arr2 [2][3]int for i := 0; i &amp;lt; 2; i++ { for j := 0; j &amp;lt; 3; j++ { arr2[i][j] = i + j } } fmt.Println(&amp;#34;构造一个二维数组&amp;#34;, arr2) 切片 slice // slice make创建 s := make([]int, 3) fmt.Printf(&amp;#34;make 创建了一个长度为：%v, 类型为%T的切片\n&amp;#34;, len(s), s) // 切片追加元素 s = append(s, 10, 11, 12, 13) fmt.</description>
    </item>
    
    <item>
      <title>Go For循环</title>
      <link>https://muxiaoqi.github.io/posts/example/loop/</link>
      <pubDate>Fri, 04 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://muxiaoqi.github.io/posts/example/loop/</guid>
      <description>// 经典for循环 for i:=0; i&amp;lt;10; i++ { fmt.Println(i) } // 单个循环条件 j := 1 for j &amp;lt; 5{ fmt.Println(j) j++ } // 永久循环 循环体内使用break/return跳出循环 for { fmt.Println(&amp;#34;一直循环&amp;#34;) break } </description>
    </item>
    
    <item>
      <title>Go 流程控制</title>
      <link>https://muxiaoqi.github.io/posts/example/controlflow/</link>
      <pubDate>Fri, 04 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://muxiaoqi.github.io/posts/example/controlflow/</guid>
      <description>条件控制 if-else // if-else基本例子 if 8%2 == 0 { fmt.Println(&amp;#34;8是偶数&amp;#34;) } else { fmt.Println(&amp;#34;8是奇数&amp;#34;) } // 条件之前带语句的 if-else if i := 5; i &amp;lt; 0 { fmt.Println(i, &amp;#34;为负数&amp;#34;) } else if i &amp;lt; 10 { fmt.Println(i, &amp;#34;为1位数&amp;#34;) } else { fmt.Println(i, &amp;#34;为多位数&amp;#34;) } 分支结构 switch // switch sex := 1 switch sex { case 0: fmt.Println(&amp;#34;保密&amp;#34;) case 1: fmt.Println(&amp;#34;男&amp;#34;) case 2: fmt.Println(&amp;#34;女&amp;#34;) } // 一个分支中多表达式 switch time.Now().Weekday() { case time.Saturday, time.</description>
    </item>
    
    <item>
      <title>Go 变量</title>
      <link>https://muxiaoqi.github.io/posts/example/variables/</link>
      <pubDate>Tue, 01 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://muxiaoqi.github.io/posts/example/variables/</guid>
      <description>// var声明一个变量 var a int = 100 fmt.Println(&amp;#34;var声明一个变量：&amp;#34;, a) // var声明多个变量 var b, c int = 1, 2 fmt.Println(&amp;#34;var声明多个变量：&amp;#34;, b, c) // 自动推导类型 var d = &amp;#34;hello world&amp;#34; fmt.Println(&amp;#34;自动推导数据类型：&amp;#34;, d) // 声明变量没初始化 会默认 int=&amp;gt;0 string=&amp;gt;&amp;#39;&amp;#39; var e bool fmt.Println(&amp;#34;bool默认值:&amp;#34;, e) // 简写方式 f := &amp;#34;i love china&amp;#34; fmt.Println(&amp;#34;简写方式: &amp;#34;, f) </description>
    </item>
    
  </channel>
</rss>
