<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>文章列表 on muxiaoqi&#39;s Blogs</title>
		<link>https://muxiaoqi.github.io/posts/</link>
		<description>Recent content in 文章列表 on muxiaoqi&#39;s Blogs</description>
		<generator>Hugo -- gohugo.io</generator>
		<language>en-us</language>
		<copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
		<lastBuildDate>Tue, 02 Mar 2021 16:38:41 +0800</lastBuildDate>
		<atom:link href="https://muxiaoqi.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
		
		<item>
			<title>Redis String</title>
			<link>https://muxiaoqi.github.io/posts/redis/string/</link>
			<pubDate>Tue, 02 Mar 2021 16:38:41 +0800</pubDate>
			
			<guid>https://muxiaoqi.github.io/posts/redis/string/</guid>
			<description>set key value // 设置指定key的值 mset key value [key value ...] // 同时设置一个或多个 key-value 对 getset key value // 将给定key值为value, 并返回key的旧值 setbit key offset value // 对 key 所储存的字符串值，设置或清除指定偏移量上的位(bit) setex key seconds value // 将值 value 关联到 key ，并将 key 的过期时间设为 seconds (以秒为单位) setnx key value // 只有在 key 不存在时设置 key 的值  </description>
			<content type="html"><![CDATA[<div class="highlight"><pre class="chroma"><code class="language-go" data-lang="go"><span class="nx">set</span> <span class="nx">key</span> <span class="nx">value</span> <span class="c1">// 设置指定key的值
</span><span class="c1"></span><span class="nx">mset</span> <span class="nx">key</span> <span class="nx">value</span> <span class="p">[</span><span class="nx">key</span> <span class="nx">value</span> <span class="o">...</span><span class="p">]</span> <span class="c1">// 同时设置一个或多个 key-value 对
</span><span class="c1"></span><span class="nx">getset</span> <span class="nx">key</span> <span class="nx">value</span> <span class="c1">// 将给定key值为value, 并返回key的旧值
</span><span class="c1"></span><span class="nx">setbit</span> <span class="nx">key</span> <span class="nx">offset</span> <span class="nx">value</span> <span class="c1">// 对 key 所储存的字符串值，设置或清除指定偏移量上的位(bit)
</span><span class="c1"></span><span class="nx">setex</span> <span class="nx">key</span> <span class="nx">seconds</span> <span class="nx">value</span> <span class="c1">// 将值 value 关联到 key ，并将 key 的过期时间设为 seconds (以秒为单位)
</span><span class="c1"></span><span class="nx">setnx</span> <span class="nx">key</span> <span class="nx">value</span> <span class="c1">// 只有在 key 不存在时设置 key 的值
</span><span class="c1"></span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>GO 结构体</title>
			<link>https://muxiaoqi.github.io/posts/example/struct/</link>
			<pubDate>Thu, 25 Feb 2021 17:43:52 +0800</pubDate>
			
			<guid>https://muxiaoqi.github.io/posts/example/struct/</guid>
			<description>GO的结构体是各个字段及字段类型的集合。
定义一个结构体 type person struct { name string age int } 实例化结构体 // 基本的实例化形式 var student person // 创建指针类型结构体 student := new(person) // 取结构体的地址实例化 student := &amp;amp;person{} 初始化 // 多值列表初始化结构体 student := person{ &amp;#34;小明&amp;#34;, 10, } fmt.Println(student) // {小明 10}  // 键值对初始化结构体 student := person{ name: &amp;#34;小明&amp;#34;, age: 10, } fmt.Println(student) // {小明 10}  // 初始化匿名结构体 msg := struct { id int data string }{ 10, &amp;#34;hello&amp;#34;, } fmt.</description>
			<content type="html"><![CDATA[<p>GO的结构体是各个字段及字段类型的集合。</p>
<h3 id="定义一个结构体">定义一个结构体</h3>
<div class="highlight"><pre class="chroma"><code class="language-go" data-lang="go"><span class="kd">type</span> <span class="nx">person</span> <span class="kd">struct</span> <span class="p">{</span>
	<span class="nx">name</span> <span class="kt">string</span>
	<span class="nx">age</span> <span class="kt">int</span>
<span class="p">}</span>
</code></pre></div><h3 id="实例化结构体">实例化结构体</h3>
<div class="highlight"><pre class="chroma"><code class="language-go" data-lang="go"><span class="c1">// 基本的实例化形式
</span><span class="c1"></span><span class="kd">var</span> <span class="nx">student</span> <span class="nx">person</span>

<span class="c1">// 创建指针类型结构体
</span><span class="c1"></span><span class="nx">student</span> <span class="o">:=</span> <span class="nb">new</span><span class="p">(</span><span class="nx">person</span><span class="p">)</span>

<span class="c1">// 取结构体的地址实例化
</span><span class="c1"></span><span class="nx">student</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">person</span><span class="p">{}</span>
</code></pre></div><h3 id="初始化">初始化</h3>
<div class="highlight"><pre class="chroma"><code class="language-go" data-lang="go"><span class="c1">// 多值列表初始化结构体
</span><span class="c1"></span><span class="nx">student</span> <span class="o">:=</span> <span class="nx">person</span><span class="p">{</span>
	<span class="s">&#34;小明&#34;</span><span class="p">,</span>
	<span class="mi">10</span><span class="p">,</span>
<span class="p">}</span>
<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">student</span><span class="p">)</span> <span class="c1">// {小明 10}
</span><span class="c1"></span>
<span class="c1">// 键值对初始化结构体
</span><span class="c1"></span><span class="nx">student</span> <span class="o">:=</span> <span class="nx">person</span><span class="p">{</span>
	<span class="nx">name</span><span class="p">:</span> <span class="s">&#34;小明&#34;</span><span class="p">,</span>
	<span class="nx">age</span><span class="p">:</span>  <span class="mi">10</span><span class="p">,</span>
<span class="p">}</span>
<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">student</span><span class="p">)</span> <span class="c1">// {小明 10}
</span><span class="c1"></span>
<span class="c1">// 初始化匿名结构体
</span><span class="c1"></span><span class="nx">msg</span> <span class="o">:=</span> <span class="kd">struct</span> <span class="p">{</span>
	<span class="nx">id</span> <span class="kt">int</span>
	<span class="nx">data</span> <span class="kt">string</span>
<span class="p">}{</span>
	<span class="mi">10</span><span class="p">,</span>
	<span class="s">&#34;hello&#34;</span><span class="p">,</span>
<span class="p">}</span>
<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">msg</span><span class="p">)</span> <span class="c1">// {10 hello}
</span></code></pre></div>]]></content>
		</item>
		
		<item>
			<title>goland激活</title>
			<link>https://muxiaoqi.github.io/posts/ide/goland%E6%BF%80%E6%B4%BB/</link>
			<pubDate>Thu, 25 Feb 2021 16:16:01 +0800</pubDate>
			
			<guid>https://muxiaoqi.github.io/posts/ide/goland%E6%BF%80%E6%B4%BB/</guid>
			<description>下载破解补丁 链接：https://pan.baidu.com/s/1Nv6wg9ZRt1Wp6LZnMSBQuQ 提取码：56h0
下载补丁文件jetbrains-agent.jar并将它放置到 Goland安装目录的\bin目录下（位置可随意，放这里是怕误操作删除了破解文件）。
进入项目 如果你之前已经使用有效期激活过可跳过此步骤，如果你是刚下载的GoLand，则需要点击激活窗口的“Evaluate for free”免费试用，然后再创建一个空项目，这样就可以进入到GoLand的工作页面
修改配置文件 进入到项目界面后，点击GoLand最上面的菜单栏中的 “Help” -&amp;gt; “Edit Custom VM Options …”，如果提示是否要创建文件，请点”Yes”
在打开的vmoptions编辑窗口末行添加：-javaagent:你goland的安装目录\jetbrains-agent.jar
修改完配置文件之后重启GoLand
输入激活码 重启GoLand之后，点击菜单栏中的 “Help” -&amp;gt; “Register …”，选择Activation code方式激活，复制下面激活码即可</description>
			<content type="html"><![CDATA[<h3 id="下载破解补丁">下载破解补丁</h3>
<p>链接：https://pan.baidu.com/s/1Nv6wg9ZRt1Wp6LZnMSBQuQ 
提取码：56h0</p>
<p>下载补丁文件jetbrains-agent.jar并将它放置到 Goland安装目录的\bin目录下（位置可随意，放这里是怕误操作删除了破解文件）。</p>
<h3 id="进入项目">进入项目</h3>
<p>如果你之前已经使用有效期激活过可跳过此步骤，如果你是刚下载的GoLand，则需要点击激活窗口的“Evaluate for free”免费试用，然后再创建一个空项目，这样就可以进入到GoLand的工作页面</p>
<h3 id="修改配置文件">修改配置文件</h3>
<p>进入到项目界面后，点击GoLand最上面的菜单栏中的 “Help” -&gt; “Edit Custom VM Options …”，如果提示是否要创建文件，请点”Yes”</p>
<p>在打开的vmoptions编辑窗口末行添加：-javaagent:你goland的安装目录\jetbrains-agent.jar</p>
<p>修改完配置文件之后重启GoLand</p>
<h3 id="输入激活码">输入激活码</h3>
<p>重启GoLand之后，点击菜单栏中的 “Help” -&gt; “Register …”，选择Activation code方式激活，复制下面激活码即可</p>
]]></content>
		</item>
		
		<item>
			<title>Go 指针</title>
			<link>https://muxiaoqi.github.io/posts/example/pointers/</link>
			<pubDate>Tue, 08 Dec 2020 18:25:01 +0800</pubDate>
			
			<guid>https://muxiaoqi.github.io/posts/example/pointers/</guid>
			<description>i := 1 fmt.Printf(&amp;#34;变量i的类型为：%T， 值为：%v&amp;#34;, i, i) // 变量i的类型为：int， 值为：1  iptr := &amp;amp;i fmt.Printf(&amp;#34;变量iptr的类型为： %T，值为：%v&amp;#34;, iptr, iptr) // 变量iptr的类型为： *int，值为：0xc0000a2058 fmt.Printf(&amp;#34;变量iptr的指针值为：%v&amp;#34;, *iptr) //变量iptr的指针值为：1 </description>
			<content type="html"><![CDATA[<div class="highlight"><pre class="chroma"><code class="language-go" data-lang="go"><span class="nx">i</span> <span class="o">:=</span> <span class="mi">1</span>
<span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;变量i的类型为：%T， 值为：%v&#34;</span><span class="p">,</span> <span class="nx">i</span><span class="p">,</span> <span class="nx">i</span><span class="p">)</span> <span class="c1">// 变量i的类型为：int， 值为：1
</span><span class="c1"></span>
<span class="nx">iptr</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">i</span>
<span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;变量iptr的类型为： %T，值为：%v&#34;</span><span class="p">,</span> <span class="nx">iptr</span><span class="p">,</span> <span class="nx">iptr</span><span class="p">)</span> <span class="c1">// 变量iptr的类型为： *int，值为：0xc0000a2058
</span><span class="c1"></span><span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;变量iptr的指针值为：%v&#34;</span><span class="p">,</span> <span class="o">*</span><span class="nx">iptr</span><span class="p">)</span> <span class="c1">//变量iptr的指针值为：1
</span></code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Go 函数</title>
			<link>https://muxiaoqi.github.io/posts/example/functions/</link>
			<pubDate>Mon, 07 Dec 2020 11:29:03 +0800</pubDate>
			
			<guid>https://muxiaoqi.github.io/posts/example/functions/</guid>
			<description>无参数无返回值的函数 func say() { fmt.Println(&amp;#34;hello go world&amp;#34;) } func main() { say() } 有返回值的函数 // 声明一个求和函数 -- 单返回值 func plus(a int, b int) int { return a + b } // 声明一个多返回值函数 func return2(a int, b int) (int, int) { return a + b, a * b } func main() { // 调用函数  result := plus(2, 3) fmt.Println(&amp;#34;2+3=&amp;#34;, result) // 两个返回值  res1, res2 := return2(1, 1) fmt.Println(&amp;#34;1+1=&amp;#34;, res1, &amp;#34;1*1=&amp;#34;, res2) // 只取一个值  _, res3 := return2(2, 3) fmt.</description>
			<content type="html"><![CDATA[<h3 id="无参数无返回值的函数">无参数无返回值的函数</h3>
<div class="highlight"><pre class="chroma"><code class="language-go" data-lang="go"><span class="kd">func</span> <span class="nf">say</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;hello go world&#34;</span><span class="p">)</span>
<span class="p">}</span>
<span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="nf">say</span><span class="p">()</span>
<span class="p">}</span>
</code></pre></div><h3 id="有返回值的函数">有返回值的函数</h3>
<div class="highlight"><pre class="chroma"><code class="language-go" data-lang="go"><span class="c1">// 声明一个求和函数 -- 单返回值
</span><span class="c1"></span><span class="kd">func</span> <span class="nf">plus</span><span class="p">(</span><span class="nx">a</span> <span class="kt">int</span><span class="p">,</span> <span class="nx">b</span> <span class="kt">int</span><span class="p">)</span> <span class="kt">int</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">a</span> <span class="o">+</span> <span class="nx">b</span>
<span class="p">}</span>

<span class="c1">// 声明一个多返回值函数
</span><span class="c1"></span><span class="kd">func</span> <span class="nf">return2</span><span class="p">(</span><span class="nx">a</span> <span class="kt">int</span><span class="p">,</span> <span class="nx">b</span> <span class="kt">int</span><span class="p">)</span> <span class="p">(</span><span class="kt">int</span><span class="p">,</span> <span class="kt">int</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">a</span> <span class="o">+</span> <span class="nx">b</span><span class="p">,</span> <span class="nx">a</span> <span class="o">*</span> <span class="nx">b</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="c1">// 调用函数
</span><span class="c1"></span>    <span class="nx">result</span> <span class="o">:=</span> <span class="nf">plus</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span>
    <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;2+3=&#34;</span><span class="p">,</span> <span class="nx">result</span><span class="p">)</span>
    <span class="c1">// 两个返回值
</span><span class="c1"></span>    <span class="nx">res1</span><span class="p">,</span> <span class="nx">res2</span> <span class="o">:=</span> <span class="nf">return2</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
    <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;1+1=&#34;</span><span class="p">,</span> <span class="nx">res1</span><span class="p">,</span> <span class="s">&#34;1*1=&#34;</span><span class="p">,</span> <span class="nx">res2</span><span class="p">)</span>
    <span class="c1">// 只取一个值
</span><span class="c1"></span>    <span class="nx">_</span><span class="p">,</span> <span class="nx">res3</span> <span class="o">:=</span> <span class="nf">return2</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span>
    <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;2*3=&#34;</span><span class="p">,</span> <span class="nx">res3</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div><h3 id="可变参数函数">可变参数函数</h3>
<div class="highlight"><pre class="chroma"><code class="language-go" data-lang="go"><span class="c1">// 声明一个求总和函数
</span><span class="c1"></span><span class="kd">func</span> <span class="nf">sum</span><span class="p">(</span><span class="nx">nums</span> <span class="o">...</span><span class="kt">int</span><span class="p">)</span> <span class="kt">int</span> <span class="p">{</span>
    <span class="nx">sum</span> <span class="o">:=</span> <span class="mi">0</span>
    <span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">num</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">nums</span> <span class="p">{</span>
        <span class="nx">sum</span> <span class="o">+=</span> <span class="nx">num</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="nx">sum</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="c1">// 可变参数
</span><span class="c1"></span>    <span class="nx">res4</span> <span class="o">:=</span> <span class="nf">sum</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">)</span>
    <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;1+2+3+4=&#34;</span><span class="p">,</span> <span class="nx">res4</span><span class="p">)</span> <span class="c1">// 1+2+3+4= 10
</span><span class="c1"></span>    <span class="c1">// 可变参数为切片
</span><span class="c1"></span>    <span class="nx">nums1</span> <span class="o">:=</span> <span class="p">[]</span><span class="kt">int</span><span class="p">{</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">}</span>
    <span class="nx">res5</span> <span class="o">:=</span> <span class="nf">sum</span><span class="p">(</span><span class="nx">nums1</span><span class="o">...</span><span class="p">)</span>
    <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;可变参数为切片求和：&#34;</span><span class="p">,</span> <span class="nx">res5</span><span class="p">)</span> <span class="c1">// 可变参数为切片求和： 10
</span><span class="c1"></span><span class="p">}</span>
</code></pre></div><h3 id="闭包">闭包</h3>
<div class="highlight"><pre class="chroma"><code class="language-go" data-lang="go"><span class="c1">// 闭包使用匿名函数 声明一个计数器
</span><span class="c1"></span><span class="kd">func</span> <span class="nf">counter</span><span class="p">()</span> <span class="kd">func</span><span class="p">()</span> <span class="kt">int</span>  <span class="p">{</span>
    <span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span>
    <span class="k">return</span> <span class="kd">func</span><span class="p">()</span> <span class="kt">int</span> <span class="p">{</span>
        <span class="nx">i</span> <span class="o">+=</span> <span class="mi">1</span>
        <span class="k">return</span> <span class="nx">i</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="c1">// 调用函数
</span><span class="c1"></span>    <span class="nx">aCounter</span> <span class="o">:=</span> <span class="nf">counter</span><span class="p">()</span>
    <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nf">aCounter</span><span class="p">())</span> <span class="c1">// 1
</span><span class="c1"></span>    <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nf">aCounter</span><span class="p">())</span> <span class="c1">// 2
</span><span class="c1"></span>    <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nf">aCounter</span><span class="p">())</span> <span class="c1">// 3
</span><span class="c1"></span>    <span class="nx">bCounter</span> <span class="o">:=</span> <span class="nf">counter</span><span class="p">()</span>
    <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nf">bCounter</span><span class="p">())</span> <span class="c1">// 1
</span><span class="c1"></span><span class="p">}</span>
</code></pre></div><h3 id="递归">递归</h3>
<div class="highlight"><pre class="chroma"><code class="language-go" data-lang="go"><span class="c1">// 递归函数 阶乘
</span><span class="c1"></span><span class="kd">func</span> <span class="nf">factorial</span><span class="p">(</span><span class="nx">i</span> <span class="kt">int</span><span class="p">)</span> <span class="kt">int</span> <span class="p">{</span>
    <span class="k">if</span> <span class="nx">i</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">{</span>
        <span class="k">return</span> <span class="mi">1</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="nx">i</span> <span class="o">*</span> <span class="nf">factorial</span><span class="p">(</span><span class="nx">i</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="c1">// 调用函数
</span><span class="c1"></span>    <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nf">factorial</span><span class="p">(</span><span class="mi">3</span><span class="p">))</span>
<span class="p">}</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Go Range遍历</title>
			<link>https://muxiaoqi.github.io/posts/example/range/</link>
			<pubDate>Mon, 07 Dec 2020 11:17:31 +0800</pubDate>
			
			<guid>https://muxiaoqi.github.io/posts/example/range/</guid>
			<description>nums := []int{1,2,3,4,5} sum := 0 // 不需索引的遍历 for _, num := range nums { sum += num } fmt.Println(&amp;#34;求和结果为：&amp;#34;, sum) // 求和结果为： 15  // 需要索引的遍历 for index, num := range nums { if num == 4 { fmt.Println(&amp;#34;4的索引值为：&amp;#34;, index) // 4的索引值为： 3  } } // 在字符串中迭代 unicode 编码 for i, c := range &amp;#34;go&amp;#34; { fmt.Println(i, c) //0 103 1 111 } </description>
			<content type="html"><![CDATA[<div class="highlight"><pre class="chroma"><code class="language-go" data-lang="go"><span class="nx">nums</span> <span class="o">:=</span> <span class="p">[]</span><span class="kt">int</span><span class="p">{</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">}</span>
<span class="nx">sum</span> <span class="o">:=</span> <span class="mi">0</span>
<span class="c1">// 不需索引的遍历
</span><span class="c1"></span><span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">num</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">nums</span> <span class="p">{</span>
    <span class="nx">sum</span> <span class="o">+=</span> <span class="nx">num</span>
<span class="p">}</span>
<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;求和结果为：&#34;</span><span class="p">,</span> <span class="nx">sum</span><span class="p">)</span> <span class="c1">// 求和结果为： 15
</span><span class="c1"></span>
<span class="c1">// 需要索引的遍历
</span><span class="c1"></span><span class="k">for</span> <span class="nx">index</span><span class="p">,</span> <span class="nx">num</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">nums</span> <span class="p">{</span>
    <span class="k">if</span> <span class="nx">num</span> <span class="o">==</span> <span class="mi">4</span> <span class="p">{</span>
        <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;4的索引值为：&#34;</span><span class="p">,</span> <span class="nx">index</span><span class="p">)</span> <span class="c1">// 4的索引值为： 3
</span><span class="c1"></span>    <span class="p">}</span>
<span class="p">}</span>

<span class="c1">// 在字符串中迭代 unicode 编码
</span><span class="c1"></span><span class="k">for</span> <span class="nx">i</span><span class="p">,</span> <span class="nx">c</span> <span class="o">:=</span> <span class="k">range</span> <span class="s">&#34;go&#34;</span> <span class="p">{</span>
    <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">i</span><span class="p">,</span> <span class="nx">c</span><span class="p">)</span> <span class="c1">//0 103   1 111
</span><span class="c1"></span><span class="p">}</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Go 数据结构</title>
			<link>https://muxiaoqi.github.io/posts/example/datatype/</link>
			<pubDate>Fri, 04 Dec 2020 16:38:07 +0800</pubDate>
			
			<guid>https://muxiaoqi.github.io/posts/example/datatype/</guid>
			<description>数组 array // array var arr [5]int fmt.Printf(&amp;#34;创建一个长度为%v, 类型为%T的数组arr\n&amp;#34;, len(arr), arr) arr[2] = 100 fmt.Printf(&amp;#34;赋值之后的新数组为：%v\n&amp;#34;, arr) // 带初始化array格式 arr1 := [5]int{1,2,3,4,5} fmt.Printf(&amp;#34;创建一个带初始值的数组：%v\n&amp;#34;, arr1) // 多维数组 var arr2 [2][3]int for i := 0; i &amp;lt; 2; i++ { for j := 0; j &amp;lt; 3; j++ { arr2[i][j] = i + j } } fmt.Println(&amp;#34;构造一个二维数组&amp;#34;, arr2) 切片 slice // slice make创建 s := make([]int, 3) fmt.Printf(&amp;#34;make 创建了一个长度为：%v, 类型为%T的切片\n&amp;#34;, len(s), s) // 切片追加元素 s = append(s, 10, 11, 12, 13) fmt.</description>
			<content type="html"><![CDATA[<h3 id="数组-array">数组 array</h3>
<div class="highlight"><pre class="chroma"><code class="language-go" data-lang="go"><span class="c1">// array
</span><span class="c1"></span><span class="kd">var</span> <span class="nx">arr</span> <span class="p">[</span><span class="mi">5</span><span class="p">]</span><span class="kt">int</span>
<span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;创建一个长度为%v, 类型为%T的数组arr\n&#34;</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="nx">arr</span><span class="p">),</span> <span class="nx">arr</span><span class="p">)</span>
<span class="nx">arr</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="p">=</span> <span class="mi">100</span>
<span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;赋值之后的新数组为：%v\n&#34;</span><span class="p">,</span> <span class="nx">arr</span><span class="p">)</span>
<span class="c1">// 带初始化array格式
</span><span class="c1"></span><span class="nx">arr1</span> <span class="o">:=</span> <span class="p">[</span><span class="mi">5</span><span class="p">]</span><span class="kt">int</span><span class="p">{</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">}</span>
<span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;创建一个带初始值的数组：%v\n&#34;</span><span class="p">,</span> <span class="nx">arr1</span><span class="p">)</span>
<span class="c1">// 多维数组
</span><span class="c1"></span><span class="kd">var</span> <span class="nx">arr2</span> <span class="p">[</span><span class="mi">2</span><span class="p">][</span><span class="mi">3</span><span class="p">]</span><span class="kt">int</span>
<span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="mi">2</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
    <span class="k">for</span> <span class="nx">j</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">j</span> <span class="p">&lt;</span> <span class="mi">3</span><span class="p">;</span> <span class="nx">j</span><span class="o">++</span> <span class="p">{</span>
        <span class="nx">arr2</span><span class="p">[</span><span class="nx">i</span><span class="p">][</span><span class="nx">j</span><span class="p">]</span> <span class="p">=</span> <span class="nx">i</span> <span class="o">+</span> <span class="nx">j</span>
    <span class="p">}</span>
<span class="p">}</span>
<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;构造一个二维数组&#34;</span><span class="p">,</span> <span class="nx">arr2</span><span class="p">)</span>
</code></pre></div><h3 id="切片-slice">切片 slice</h3>
<div class="highlight"><pre class="chroma"><code class="language-go" data-lang="go"><span class="c1">// slice make创建
</span><span class="c1"></span><span class="nx">s</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">([]</span><span class="kt">int</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span>
<span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;make 创建了一个长度为：%v, 类型为%T的切片\n&#34;</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="nx">s</span><span class="p">),</span> <span class="nx">s</span><span class="p">)</span>
<span class="c1">// 切片追加元素
</span><span class="c1"></span><span class="nx">s</span> <span class="p">=</span> <span class="nb">append</span><span class="p">(</span><span class="nx">s</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">11</span><span class="p">,</span> <span class="mi">12</span><span class="p">,</span> <span class="mi">13</span><span class="p">)</span>
<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;切片追加后的新切片为：&#34;</span><span class="p">,</span> <span class="nx">s</span><span class="p">)</span>
<span class="c1">// 切片复制
</span><span class="c1"></span><span class="nx">copyS</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">([]</span><span class="kt">int</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="nx">s</span><span class="p">))</span>
<span class="nb">copy</span><span class="p">(</span><span class="nx">copyS</span><span class="p">,</span> <span class="nx">s</span><span class="p">)</span>
<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;复制的新切片为：&#34;</span><span class="p">,</span> <span class="nx">copyS</span><span class="p">)</span>
<span class="c1">// 切片分割 slice[low:high]
</span><span class="c1"></span><span class="nx">sliceA</span> <span class="o">:=</span> <span class="nx">s</span><span class="p">[</span><span class="mi">2</span><span class="p">:</span><span class="mi">5</span><span class="p">]</span>
<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;切割后的新切片为：&#34;</span><span class="p">,</span> <span class="nx">sliceA</span><span class="p">)</span>
<span class="nx">sliceB</span> <span class="o">:=</span> <span class="nx">s</span><span class="p">[:</span><span class="mi">5</span><span class="p">]</span>
<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;获取切片前5个元素：&#34;</span><span class="p">,</span> <span class="nx">sliceB</span><span class="p">)</span>
<span class="nx">sliceC</span> <span class="o">:=</span> <span class="nx">s</span><span class="p">[</span><span class="mi">2</span><span class="p">:]</span>
<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;获取切片第2个之后的数据：&#34;</span><span class="p">,</span> <span class="nx">sliceC</span><span class="p">)</span>
<span class="c1">// 带初始值的切片
</span><span class="c1"></span><span class="nx">sliceD</span> <span class="o">:=</span> <span class="p">[]</span><span class="kt">string</span><span class="p">{</span><span class="s">&#34;a&#34;</span><span class="p">,</span> <span class="s">&#34;b&#34;</span><span class="p">,</span> <span class="s">&#34;c&#34;</span><span class="p">,</span> <span class="s">&#34;d&#34;</span><span class="p">}</span>
<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;简写切片变量：&#34;</span><span class="p">,</span> <span class="nx">sliceD</span><span class="p">)</span>
<span class="c1">// 多维切片
</span><span class="c1"></span><span class="nx">sliceE</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">([][]</span><span class="kt">int</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span>
<span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="mi">3</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
    <span class="nx">l</span> <span class="o">:=</span> <span class="nx">i</span> <span class="o">+</span> <span class="mi">1</span>
    <span class="nx">sliceE</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="p">=</span> <span class="nb">make</span><span class="p">([]</span><span class="kt">int</span><span class="p">,</span> <span class="nx">l</span><span class="p">)</span>
    <span class="k">for</span> <span class="nx">j</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">j</span> <span class="p">&lt;</span> <span class="nx">l</span><span class="p">;</span> <span class="nx">j</span><span class="o">++</span> <span class="p">{</span>
        <span class="nx">sliceE</span><span class="p">[</span><span class="nx">i</span><span class="p">][</span><span class="nx">j</span><span class="p">]</span> <span class="p">=</span> <span class="nx">i</span> <span class="o">+</span> <span class="nx">j</span>
    <span class="p">}</span>
<span class="p">}</span>
<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;二维切片为：&#34;</span><span class="p">,</span> <span class="nx">sliceE</span><span class="p">)</span>
</code></pre></div><h3 id="关联数组-map">关联数组 map</h3>
<div class="highlight"><pre class="chroma"><code class="language-go" data-lang="go"><span class="c1">// 创建空map
</span><span class="c1"></span><span class="nx">m</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="kt">string</span><span class="p">)</span>
<span class="nx">m</span><span class="p">[</span><span class="s">&#34;name&#34;</span><span class="p">]</span> <span class="p">=</span> <span class="s">&#34;张三&#34;</span>
<span class="nx">m</span><span class="p">[</span><span class="s">&#34;sex&#34;</span><span class="p">]</span> <span class="p">=</span> <span class="s">&#34;男&#34;</span>
<span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;map的值为：%v, 长度为：%v\n&#34;</span><span class="p">,</span> <span class="nx">m</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="nx">m</span><span class="p">))</span> <span class="c1">// map的值为：map[name:张三 sex:男], 长度为：2
</span><span class="c1">// 删除键值对
</span><span class="c1"></span><span class="nb">delete</span><span class="p">(</span><span class="nx">m</span><span class="p">,</span> <span class="s">&#34;sex&#34;</span><span class="p">)</span>
<span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;map删除后的值为：%v, 长度为：%v\n&#34;</span><span class="p">,</span> <span class="nx">m</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="nx">m</span><span class="p">))</span> <span class="c1">// map删除后的值为：map[name:张三], 长度为：1
</span><span class="c1">// 判断键是否存在
</span><span class="c1"></span><span class="nx">_</span><span class="p">,</span> <span class="nx">psr</span> <span class="o">:=</span> <span class="nx">m</span><span class="p">[</span><span class="s">&#34;sex&#34;</span><span class="p">]</span>
<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">psr</span><span class="p">)</span>    <span class="c1">// false
</span><span class="c1">// 声明带初始值的map
</span><span class="c1"></span><span class="nx">m1</span> <span class="o">:=</span> <span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="kt">int</span><span class="p">{</span><span class="s">&#34;k1&#34;</span><span class="p">:</span> <span class="mi">10</span><span class="p">,</span> <span class="s">&#34;k2&#34;</span><span class="p">:</span> <span class="mi">20</span><span class="p">,</span> <span class="s">&#34;k3&#34;</span><span class="p">:</span> <span class="mi">30</span><span class="p">}</span>
<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;map m1的值为：&#34;</span><span class="p">,</span> <span class="nx">m1</span><span class="p">)</span> <span class="c1">// map m1的值为： map[k1:10 k2:20 k3:30]
</span></code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Go For循环</title>
			<link>https://muxiaoqi.github.io/posts/example/loop/</link>
			<pubDate>Fri, 04 Dec 2020 00:00:00 +0000</pubDate>
			
			<guid>https://muxiaoqi.github.io/posts/example/loop/</guid>
			<description>// 经典for循环 for i:=0; i&amp;lt;10; i++ { fmt.Println(i) } // 单个循环条件 j := 1 for j &amp;lt; 5{ fmt.Println(j) j++ } // 永久循环 循环体内使用break/return跳出循环 for { fmt.Println(&amp;#34;一直循环&amp;#34;) break } </description>
			<content type="html"><![CDATA[<div class="highlight"><pre class="chroma"><code class="language-go" data-lang="go"><span class="c1">// 经典for循环
</span><span class="c1"></span><span class="k">for</span> <span class="nx">i</span><span class="o">:=</span><span class="mi">0</span><span class="p">;</span> <span class="nx">i</span><span class="p">&lt;</span><span class="mi">10</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
    <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span>
<span class="p">}</span>
<span class="c1">// 单个循环条件
</span><span class="c1"></span><span class="nx">j</span> <span class="o">:=</span> <span class="mi">1</span>
<span class="k">for</span> <span class="nx">j</span> <span class="p">&lt;</span> <span class="mi">5</span><span class="p">{</span>
    <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">j</span><span class="p">)</span>
    <span class="nx">j</span><span class="o">++</span>
<span class="p">}</span>
<span class="c1">// 永久循环 循环体内使用break/return跳出循环
</span><span class="c1"></span><span class="k">for</span> <span class="p">{</span>
    <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;一直循环&#34;</span><span class="p">)</span>
    <span class="k">break</span>
<span class="p">}</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Go 流程控制</title>
			<link>https://muxiaoqi.github.io/posts/example/controlflow/</link>
			<pubDate>Fri, 04 Dec 2020 00:00:00 +0000</pubDate>
			
			<guid>https://muxiaoqi.github.io/posts/example/controlflow/</guid>
			<description>条件控制 if-else // if-else基本例子 if 8%2 == 0 { fmt.Println(&amp;#34;8是偶数&amp;#34;) } else { fmt.Println(&amp;#34;8是奇数&amp;#34;) } // 条件之前带语句的 if-else if i := 5; i &amp;lt; 0 { fmt.Println(i, &amp;#34;为负数&amp;#34;) } else if i &amp;lt; 10 { fmt.Println(i, &amp;#34;为1位数&amp;#34;) } else { fmt.Println(i, &amp;#34;为多位数&amp;#34;) } 分支结构 switch // switch sex := 1 switch sex { case 0: fmt.Println(&amp;#34;保密&amp;#34;) case 1: fmt.Println(&amp;#34;男&amp;#34;) case 2: fmt.Println(&amp;#34;女&amp;#34;) } // 一个分支中多表达式 switch time.Now().Weekday() { case time.Saturday, time.</description>
			<content type="html"><![CDATA[<h3 id="条件控制-if-else">条件控制 if-else</h3>
<div class="highlight"><pre class="chroma"><code class="language-go" data-lang="go"><span class="c1">// if-else基本例子
</span><span class="c1"></span><span class="k">if</span> <span class="mi">8</span><span class="o">%</span><span class="mi">2</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">{</span>
    <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;8是偶数&#34;</span><span class="p">)</span>
<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
    <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;8是奇数&#34;</span><span class="p">)</span>
<span class="p">}</span>
<span class="c1">// 条件之前带语句的 if-else
</span><span class="c1"></span><span class="k">if</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">5</span><span class="p">;</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="mi">0</span> <span class="p">{</span>
    <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">i</span><span class="p">,</span> <span class="s">&#34;为负数&#34;</span><span class="p">)</span>
<span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="mi">10</span> <span class="p">{</span>
    <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">i</span><span class="p">,</span> <span class="s">&#34;为1位数&#34;</span><span class="p">)</span>
<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
    <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">i</span><span class="p">,</span> <span class="s">&#34;为多位数&#34;</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div><h3 id="分支结构-switch">分支结构 switch</h3>
<div class="highlight"><pre class="chroma"><code class="language-go" data-lang="go"><span class="c1">// switch
</span><span class="c1"></span><span class="nx">sex</span> <span class="o">:=</span> <span class="mi">1</span>
<span class="k">switch</span> <span class="nx">sex</span> <span class="p">{</span>
<span class="k">case</span> <span class="mi">0</span><span class="p">:</span>
    <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;保密&#34;</span><span class="p">)</span>
<span class="k">case</span> <span class="mi">1</span><span class="p">:</span>
    <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;男&#34;</span><span class="p">)</span>
<span class="k">case</span> <span class="mi">2</span><span class="p">:</span>
    <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;女&#34;</span><span class="p">)</span>
<span class="p">}</span>
<span class="c1">// 一个分支中多表达式
</span><span class="c1"></span><span class="k">switch</span> <span class="nx">time</span><span class="p">.</span><span class="nf">Now</span><span class="p">().</span><span class="nf">Weekday</span><span class="p">()</span> <span class="p">{</span>
<span class="k">case</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Saturday</span><span class="p">,</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Sunday</span><span class="p">:</span>
    <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;周末了，出去浪&#34;</span><span class="p">)</span>
<span class="k">default</span><span class="p">:</span>
    <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;工作日，努力搬砖&#34;</span><span class="p">)</span>
<span class="p">}</span>
<span class="c1">// 不带表达式的switch
</span><span class="c1"></span><span class="nx">t</span> <span class="o">:=</span> <span class="nx">time</span><span class="p">.</span><span class="nf">Now</span><span class="p">()</span>
<span class="k">switch</span> <span class="p">{</span>
<span class="k">case</span> <span class="nx">t</span><span class="p">.</span><span class="nf">Hour</span><span class="p">()</span> <span class="p">&lt;</span> <span class="mi">12</span><span class="p">:</span>
    <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;上午&#34;</span><span class="p">)</span>
<span class="k">default</span><span class="p">:</span>
    <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;下午&#34;</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Go 变量</title>
			<link>https://muxiaoqi.github.io/posts/example/variables/</link>
			<pubDate>Tue, 01 Dec 2020 00:00:00 +0000</pubDate>
			
			<guid>https://muxiaoqi.github.io/posts/example/variables/</guid>
			<description>// var声明一个变量 var a int = 100 fmt.Println(&amp;#34;var声明一个变量：&amp;#34;, a) // var声明多个变量 var b, c int = 1, 2 fmt.Println(&amp;#34;var声明多个变量：&amp;#34;, b, c) // 自动推导类型 var d = &amp;#34;hello world&amp;#34; fmt.Println(&amp;#34;自动推导数据类型：&amp;#34;, d) // 声明变量没初始化 会默认 int=&amp;gt;0 string=&amp;gt;&amp;#39;&amp;#39; var e bool fmt.Println(&amp;#34;bool默认值:&amp;#34;, e) // 简写方式 f := &amp;#34;i love china&amp;#34; fmt.Println(&amp;#34;简写方式: &amp;#34;, f) </description>
			<content type="html"><![CDATA[<div class="highlight"><pre class="chroma"><code class="language-go" data-lang="go"><span class="c1">// var声明一个变量
</span><span class="c1"></span><span class="kd">var</span> <span class="nx">a</span> <span class="kt">int</span> <span class="p">=</span> <span class="mi">100</span>
<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;var声明一个变量：&#34;</span><span class="p">,</span> <span class="nx">a</span><span class="p">)</span>
<span class="c1">// var声明多个变量
</span><span class="c1"></span><span class="kd">var</span> <span class="nx">b</span><span class="p">,</span> <span class="nx">c</span> <span class="kt">int</span> <span class="p">=</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span>
<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;var声明多个变量：&#34;</span><span class="p">,</span> <span class="nx">b</span><span class="p">,</span> <span class="nx">c</span><span class="p">)</span>
<span class="c1">// 自动推导类型
</span><span class="c1"></span><span class="kd">var</span> <span class="nx">d</span> <span class="p">=</span> <span class="s">&#34;hello world&#34;</span>
<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;自动推导数据类型：&#34;</span><span class="p">,</span> <span class="nx">d</span><span class="p">)</span>
<span class="c1">// 声明变量没初始化 会默认 int=&gt;0  string=&gt;&#39;&#39;
</span><span class="c1"></span><span class="kd">var</span> <span class="nx">e</span> <span class="kt">bool</span>
<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;bool默认值:&#34;</span><span class="p">,</span> <span class="nx">e</span><span class="p">)</span>
<span class="c1">// 简写方式
</span><span class="c1"></span><span class="nx">f</span> <span class="o">:=</span> <span class="s">&#34;i love china&#34;</span>
<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;简写方式: &#34;</span><span class="p">,</span> <span class="nx">f</span><span class="p">)</span>
</code></pre></div>]]></content>
		</item>
		
	</channel>
</rss>
